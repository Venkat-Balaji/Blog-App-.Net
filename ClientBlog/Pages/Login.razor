@page "/login"
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject Supabase.Client SupabaseClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using MudBlazor
@using ClientBlog.Services
@inject AuthService AuthService;
@inject SupabaseService Supabase;

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-12 d-flex justify-center">
    <MudCard Style="width:100%; max-width:450px;">
        <MudCardContent>
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-2">Login to Your Account</MudText>

                <MudTextField Label="Email" @bind-Value="Email" Placeholder="email@example.com" Required="true" />
                <MudTextField Label="Password" @bind-Value="Password" InputType="InputType.Password" Required="true" />

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <MudText Color="Color.Error">@ErrorMessage</MudText>
                }

                <MudButton OnClick="LoginUser" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Login</MudButton>

                <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                    Don't have an account?
                    <MudLink Href="/register" Color="Color.Primary">Register here</MudLink>
                </MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string Email = string.Empty;
    private string Password = string.Empty;
    private string ErrorMessage;

    private async Task LoginUser()
    {
        try
        {
            var result = await SupabaseClient.Auth.SignIn(Email, Password);

            if (!string.IsNullOrEmpty(result?.AccessToken))
            {
                await LocalStorage.SetItemAsync("authToken", result.AccessToken);
                await LocalStorage.SetItemAsync("userEmail", Email);

                Snackbar.Add("Login successful!", Severity.Success);
                Navigation.NavigateTo("/home", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
    }
}
